// Copied from: https://github.com/digitalfabrik/integreat-app/blob/0d256a7d05afa5650389999d33e3a50b74fe4120/native/android/app/buildConfigs.gradle
// Provides functions to load and parse build configs.

import groovy.json.JsonSlurper

static def isWindows() {
    System.properties['os.name'].toLowerCase().contains('windows')
}

ext.commandCache = new HashMap<>();

def execCommand(command) {
    def cmdLine = isWindows() ? ["cmd", "/c", command] : command
    
    if (command in ext.commandCache) {
        logger.quiet("Using cached command output")
        return ext.commandCache[command]
    }

    def process = cmdLine.execute(null, project.rootDir)
    def (out, err) = new StringWriter().with {
        o -> new StringWriter().with {
            e -> process.waitForProcessOutput(o, e)
                [o,e]*.toString()
        }
    }

    if (process.exitValue() != 0) {
        logger.error("Failed to get build config for $command (${process.exitValue()}): $err")
        return
    }

    ext.commandCache[command] = out;

    return out
}

def createBuildConfig(buildConfigName) {
    def proc = execCommand("app-toolbelt v0 build-config to-json $buildConfigName android")
    def buildConfig = new JsonSlurper().parseText(proc)
    return buildConfig
}

def setupResourceValues(buildConfigName, resValue) {
    def proc = execCommand("app-toolbelt v0 build-config to-properties $buildConfigName android")
    def buildConfigProperties = new Properties()
    buildConfigProperties.load(new StringReader(proc))

    // Java properties use the same syntax as xcconfig files
    // https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html
    buildConfigProperties.each {
        def escaped = it.value.replaceAll("%", "\\\\u0025")
        // Make build config values available as string resource, e.g. for use in AndroidManifest
        resValue "string", it.key, "\"$escaped\""
    }
}

def determineAppName(buildConfig) {
    return [appName: "${buildConfig.appName}"]
}

def determineIcon(buildConfig) {
    return [icon: "${buildConfig.appIcon}"]
}

def determineBuildConfigName() {
    if (project.hasProperty('BUILD_CONFIG_NAME')) {
        return project.BUILD_CONFIG_NAME
    } else if (System.getenv()["BUILD_CONFIG_NAME"]) {
        return System.getenv()['BUILD_CONFIG_NAME']
    } else {
        logger.warn("WARNING: No build config specified. Using the build config 'bayern'!")
        return 'bayern'
    }
}

ext {
    createBuildConfig = this.&createBuildConfig
    // setupGoogleServices = this.&setupGoogleServices
    setupResourceValues = this.&setupResourceValues
    // determineTheme = this.&determineTheme
    determineAppName = this.&determineAppName
    determineIcon = this.&determineIcon
    determineBuildConfigName = this.&determineBuildConfigName
}
