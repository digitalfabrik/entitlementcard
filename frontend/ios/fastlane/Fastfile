# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do
  setup_circle_ci
end

default_platform(:ios)

platform :ios do

  private_lane :apple_auth do |options|
    ensure_env_vars(
      env_vars: ["APP_STORE_CONNECT_API_KEY_ID", "APP_STORE_CONNECT_API_ISSUER_ID", "APP_STORE_CONNECT_API_KEY_CONTENT"]
    )

    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APP_STORE_CONNECT_API_KEY_CONTENT'])
    )
  end

  # The following parameters have to be passed:
  # build_config_name: The build config which should be used
  desc "Download and setup certificates"
  private_lane :certificates do |options|
    apple_auth

    build_config_name = options[:build_config_name]

    if [build_config_name].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    bundleIdentifier = sh("npx --no app-toolbelt v0 build-config to-json #{build_config_name} ios | jq -rj .bundleIdentifier")

    match(type: "appstore", app_identifier: bundleIdentifier, readonly: true)
  end

  # The following parameters have to be passed:
  # version_name: The version name the build should use
  # version_code: The version code the build should use
  # build_config_name: The build config which should be used
  desc "Create a release build"
  lane :build do |options|
    version_code = options[:version_code]
    version_name = options[:version_name]
    build_config_name = options[:build_config_name]

    puts(version_code)
    puts(version_name)

    if [version_code, version_name, build_config_name].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    apple_auth
    certificates build_config_name:build_config_name

    increment_build_number(
      build_number: version_code
    )

    increment_version_number(
      version_number: version_name
    )

    ENV["EXTRA_PACKAGER_ARGS"] = "--sourcemap-output ios/output/#{build_config_name}.ios.bundle.map"
    # DO NOT REMOVE THIS! It is necessary for the javascript build config logic.
    ENV["BUILD_CONFIG_NAME"] = build_config_name
    # DO NOT OVERWRITE THE BUNDLE_CONFIG ENV VARIABLE! It is used by ruby bundle.

    sh("fvm flutter pub run build_runner build --define df_build_config=name=#{build_config_name}")
     # use base64 encoded variable "environment=production" directly, because shell result does not work for gym as it does for gradle (android/Fastfile)
    env_prod_base64 = "ZW52aXJvbm1lbnQ9cHJvZHVjdGlvbg=="

    build_app(
       workspace: "Runner.xcworkspace",
       scheme: build_config_name,
       output_directory: "#{ENV['HOME']}",
       output_name: "#{build_config_name}.ipa",
       export_method: "app-store",
       xcargs: "DART_DEFINES='#{env_prod_base64}' FLAVOR='#{build_config_name}'"
     )
  end

  desc "Deliver iOS App to TestFlight for testers"
  lane :upload_to_test_flight do |options|
    apple_auth()

    build_config_name = options[:build_config_name]
    ipa_path = options[:ipa_path]

    if [build_config_name, ipa_path].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      ipa: "#{ENV['HOME']}/#{ipa_path}",
      distribute_external: false
    )
  end

  desc "Deliver iOS App to production"
  lane :appstoreconnect_upload do |options|
    apple_auth()

    version_name = options[:version_name]
    build_config_name = options[:build_config_name]
    ipa_path = options[:ipa_path]

    if [build_config_name, ipa_path, version_name].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    puts("delivering #{build_config_name} v#{version_name}")

    # https://docs.fastlane.tools/actions/deliver/
    deliver(
      metadata_path: "./fastlane/#{build_config_name}/metadata",
      ipa: "#{ENV['HOME']}/#{ipa_path}",
      app_version: version_name,
      submit_for_review: true,
      automatic_release: true,
      force: true,
      skip_screenshots: true,
      skip_metadata: false,
      overwrite_screenshots: true,
      precheck_include_in_app_purchases: false, # We do not have inapp purchases
      submission_information: { add_id_info_uses_idfa: false }  # https://firebase.google.com/docs/analytics/configure-data-collection?platform=ios
    # https://support.google.com/firebase/answer/6318039?hl=en
    )
  end

  # The following parameters have to be passed:
  # build_config_name: The name of the build config
  desc "Promote the app from testflight to production in App Store Connect."
  lane :appstoreconnect_promote do |options|
    apple_auth()

    build_config_name = options[:build_config_name]

    if [build_config_name].include?(nil)
      raise "'nil' passed as parameter! Aborting..."
    end

    bundle_identifier = sh("npx --no app-toolbelt v0 build-config to-json #{build_config_name} ios | jq -rj .bundleIdentifier ")

    testflight_build_number = latest_testflight_build_number(app_identifier: bundle_identifier)
    testflight_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
    app_store_build_number = app_store_build_number(app_identifier: bundle_identifier)

    if testflight_build_number <= app_store_build_number
      puts("Nothing to do, latest version already available in app store connect...")
      next
    end

    puts("promoting #{build_config_name} v#{testflight_version} - #{testflight_build_number} to app store connect")

    # https://docs.fastlane.tools/actions/deliver/#submit-build
    deliver(
      metadata_path: "./fastlane/#{build_config_name}/metadata",
      app_version: testflight_version,
      build_number: testflight_build_number.to_s,
      app_identifier: bundle_identifier,
      submit_for_review: true,
      automatic_release: true,
      force: true,
      skip_metadata: false,
      skip_screenshots: true,
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false, # We do not have inapp purchases
    )
  end

  desc "Generate new localized screenshots"
  lane :snap_bayern do
   sh "fvm flutter pub run build_runner build --define df_build_config=name=bayern"
   bundle_identifier = "de.nrw.it.ehrensachebayern"
    capture_screenshots(
      workspace: "Runner.xcworkspace", 
      scheme: "bayern",
      app_identifier: bundle_identifier,
      output_directory: "./fastlane/screenshots/bayern",
      launch_arguments: [bundle_identifier]
    )
  end

  lane :snap_nuernberg do
    sh "fvm flutter pub run build_runner build --define df_build_config=name=nuernberg"
    bundle_identifier = "app.sozialpass.nuernberg"
    capture_screenshots(
      workspace: "Runner.xcworkspace", 
      scheme: "nuernberg",
      app_identifier: bundle_identifier,
      output_directory: "./fastlane/screenshots/nuernberg",
      launch_arguments: [bundle_identifier]
    )
  end

  lane :snap_koblenz do
    sh "fvm flutter pub run build_runner build --define df_build_config=name=koblenz"
    bundle_identifier = "app.sozialpass.koblenz"
    capture_screenshots(
      workspace: "Runner.xcworkspace",
      scheme: "koblenz",
      app_identifier: bundle_identifier,
      output_directory: "./fastlane/screenshots/koblenz",
      launch_arguments: [bundle_identifier]
    )
  end
end
