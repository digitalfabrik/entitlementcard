#!/bin/sh

#
# Install this using:
# ln -s ../../.github/hooks/pre-commit .git/hooks/pre-commit
#

# Regenerate circle-ci config-yml
CONFIG=$(git diff --cached --name-only .circleci/src)

echo "$CONFIG" | ./scripts/circleci-update-config
echo "$CONFIG" | xargs git add .circleci/config.yml

REACT_FILES=$(git diff --cached --name-only -- administration/ | sed 's| |\\ |g')

if [ ! -z "$REACT_FILES" ]; then
  cd administration && yarn lint && cd ..
fi

DART_FILES=$(git diff --cached --name-only --diff-filter=ACMR "*.dart" | sed 's| |\\ |g')
#echo "$DART_FILES" | xargs -I {} sh -c 'cd ./frontend && fvm dart -version'
#
#
#  # Check if .fvmrc exists in project root
#  if [ ! -f "../../frontend/.fvmrc" ]; then
#    echo "Error: .fvmrc file not found. Please configure FVM for this project."
#    exit 1
#  fi
#
#  # Use FVM to get the configured project version
#  PROJECT_DART_VERSION=$(fvm list | grep ">" | awk '{print $2}')
#  if [ -z "$PROJECT_DART_VERSION" ]; then
#    echo "Error: No Dart version configured for this project. Run 'fvm use <version>' first."
#    exit 1
#  fi
#
#  echo "Using project Dart version: $PROJECT_DART_VERSION (via FVM)"


if [ ! -z "$DART_FILES" ]; then
  if [ ! -x "$(command -v fvm)" ]; then
    echo "You need to install fvm in order to commit and format files"
    exit 1
  fi

  # Prettify all selected files
  echo "$DART_FILES" | xargs -I {} sh -c 'cd ./frontend && fvm dart format -l 120 . {}'

  # Add back the modified/prettified files to staging
  echo "$DART_FILES" | xargs git add
fi

# Adjusted from the hook generated by ktlint-gradle:

KOTLIN_FILES="$(git --no-pager diff --name-status --no-color --cached -- backend/ | awk '$1 != "D" && $NF ~ /\.kts?$/ { print $NF }')"

if [ ! -z "$KOTLIN_FILES" ]; then
  echo "Running ktlint over these files:"
  echo "$KOTLIN_FILES"

  diff=.git/unstaged-ktlint-git-hook.diff
  git diff --color=never > $diff
  if [ -s $diff ]; then
    git apply -R $diff
  fi

  ./backend/gradlew -p ./backend --quiet ktlintFormat -PinternalKtlintGitFilter="$KOTLIN_FILES"
  gradle_command_exit_code=$?

  echo "Completed ktlint run."

  echo "$KOTLIN_FILES" | while read -r file; do
      if [ -f $file ]; then
          git add $file
      fi
  done


  if [ -s $diff ]; then
    git apply --ignore-whitespace $diff
  fi
  rm $diff
  unset diff

  echo "Completed ktlint hook."
  exit $gradle_command_exit_code
fi

exit 0
