schema {
  query: Query
  mutation: Mutation
}

"This directive allows results to be deferred during execution"
directive @defer(
    "Deferred behaviour is controlled by this argument"
    if: Boolean! = true,
    "A unique label that represents the fragment being deferred"
    label: String
  ) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String! = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"This directive disables error propagation when a non nullable field returns null for the given operation."
directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Administrator {
  email: String!
  id: Int!
  region: Region
  regionId: Int
  role: Role!
}

type ApiTokenMetaData {
  creatorEmail: String!
  expirationDate: String!
  id: Int!
  type: ApiTokenType!
}

type CardActivationResultModel {
  activationState: ActivationState!
  activationTimeStamp: String!
  totpSecret: String
}

type CardCreationResultModel {
  dynamicActivationCode: DynamicActivationCodeResult!
  staticVerificationCode: StaticVerificationCodeResult
}

type CardVerificationResultModel {
  extendable: Boolean!
  valid: Boolean!
  verificationTimeStamp: String!
}

type DynamicActivationCodeResult {
  cardInfoHashBase64: String!
  codeBase64: String!
}

type Mutation {
  "Activate a dynamic entitlement card"
  activateCard(activationSecretBase64: String!, cardInfoHashBase64: String!, overwrite: Boolean!, project: String!): CardActivationResultModel!
  "Changes an administrator's password"
  changePassword(currentPassword: String!, email: String!, newPassword: String!): Boolean!
  "Creates a new administrator"
  createAdministrator(email: String!, regionId: Int, role: Role!, sendWelcomeMail: Boolean!): Boolean!
  "Creates a new api token for user import endpoint"
  createApiToken(expiresIn: Int!): String!
  "Creates a new digital entitlementcard from self-service portal"
  createCardFromSelfService(encodedCardInfo: String!, generateStaticCode: Boolean!, project: String!): CardCreationResultModel!
  "Creates a new digital entitlementcard and returns it"
  createCardsByCardInfos(applicationIdToMarkAsProcessed: Int, encodedCardInfos: [String!]!, generateStaticCodes: Boolean!): [CardCreationResultModel!]!
  "Deletes an existing administrator"
  deleteAdministrator(adminId: Int!): Boolean!
  "Deletes a selected API token"
  deleteApiToken(id: Int!): Int!
  "Deletes a batch of cards (that have not yet been activated)"
  deleteInactiveCards(cardInfoHashBase64List: [String!]!, regionId: Int!): Boolean!
  "Edits an existing administrator"
  editAdministrator(adminId: Int!, newEmail: String!, newRegionId: Int, newRole: Role!): Boolean!
  "Reset the administrator's password"
  resetPassword(email: String!, newPassword: String!, passwordResetKey: String!, project: String!): Boolean!
  "Sends a confirmation mail to the user when the card creation was successful"
  sendCardCreationConfirmationMail(deepLink: String!, recipientAddress: String!, recipientName: String!, regionId: Int!): Boolean!
  "Sends a mail that allows the administrator to reset their password."
  sendResetMail(email: String!, project: String!): Boolean!
  "Signs in an administrator"
  signIn(authData: AuthDataInput!, project: String!): SignInPayload!
  "Updates application confirmation mail note"
  updateApplicationConfirmationNote(applicationConfirmationNote: String!, applicationConfirmationNoteActivated: Boolean!, regionId: Int!): Boolean!
  "Updates the data privacy policy of a region"
  updateDataPrivacy(dataPrivacyText: String!, regionId: Int!): Boolean!
  "Updates the notification settings"
  updateNotificationSettings(notificationSettings: NotificationSettingsInput!): Boolean!
  "Updates the region specific settings"
  updateRegionSettings(activatedForApplication: Boolean!, activatedForConfirmationMail: Boolean!, regionId: Int!): Boolean!
}

type NotificationSettings {
  notificationOnApplication: Boolean!
  notificationOnVerification: Boolean!
}

type Query {
  "Verify password reset link"
  checkPasswordResetLink(project: String!, resetKey: String!): Boolean!
  "Gets metadata of all api tokens for a project"
  getApiTokenMetaData: [ApiTokenMetaData!]!
  "Get the pepper for Koblenz user hashing"
  getHashingPepper: String!
  "Get the notification settings of the authenticated administrator"
  getNotificationSettings: NotificationSettings!
  "Returns all administrators in a project. This query requires the role PROJECT_ADMIN."
  getUsersInProject: [Administrator!]!
  "Returns all administrators in a region. This query requires the role REGION_ADMIN or PROJECT_ADMIN."
  getUsersInRegion(regionId: Int!): [Administrator!]!
  "Returns region data for specific region."
  regionByRegionId(regionId: Int!): Region!
  "Returns regions queried by ids in the given project."
  regionsByIdInProject(ids: [Int!]!, project: String!): [Region]!
  "Return list of all regions in the given project."
  regionsInProject(project: String!): [Region!]!
  "Returns whether there is a card in the given project with that hash registered for that this TOTP is currently valid, extendable and a timestamp of the last check"
  verifyCardInProjectV2(card: CardVerificationModelInput!, project: String!): CardVerificationResultModel!
  "Returns the requesting administrator as retrieved from his JWT token."
  whoAmI: Administrator!
}

type Region {
  activatedForApplication: Boolean!
  activatedForCardConfirmationMail: Boolean!
  applicationConfirmationMailNote: String
  applicationConfirmationMailNoteActivated: Boolean!
  dataPrivacyPolicy: String
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String
}

type SignInPayload {
  token: String!
}

type StaticVerificationCodeResult {
  cardInfoHashBase64: String!
  codeBase64: String!
}

enum ActivationState {
  did_not_overwrite_existing
  expired
  not_found
  revoked
  success
  wrong_secret
}

enum ApiTokenType {
  USER_IMPORT
  VERIFIED_APPLICATION
}

enum CodeType {
  DYNAMIC
  STATIC
}

enum GraphQLExceptionCode {
  APPLICATION_DATA_INCOMPLETE
  EMAIL_ALREADY_EXISTS
  FREINET_AGENCY_NOT_FOUND
  FREINET_CARD_DATA_INVALID
  FREINET_DATA_TRANSFER_NOT_PERMITTED
  FREINET_FOUND_MULTIPLE_PERSONS
  FREINET_PERSON_DATA_INVALID
  INVALID_APPLICATION_CONFIRMATION_NOTE_SIZE
  INVALID_CARD_HASH
  INVALID_CODE_TYPE
  INVALID_CREDENTIALS
  INVALID_DATA_POLICY_SIZE
  INVALID_FILE_SIZE
  INVALID_FILE_TYPE
  INVALID_INPUT
  INVALID_JSON
  INVALID_LINK
  INVALID_NOTE_SIZE
  INVALID_PASSWORD
  INVALID_PASSWORD_RESET_LINK
  INVALID_QR_CODE_SIZE
  INVALID_ROLE
  MAIL_NOT_SENT
  PASSWORD_RESET_KEY_EXPIRED
  REGION_NOT_ACTIVATED_CARD_CONFIRMATION_MAIL
  REGION_NOT_ACTIVATED_FOR_APPLICATION
  REGION_NOT_FOUND
  REGION_NOT_UNIQUE
  USER_ENTITLEMENT_EXPIRED
  USER_ENTITLEMENT_NOT_FOUND
}

enum Role {
  EXTERNAL_VERIFIED_API_USER
  NO_RIGHTS
  PROJECT_ADMIN
  PROJECT_STORE_MANAGER
  REGION_ADMIN
  REGION_MANAGER
}

input AuthDataInput {
  email: String!
  password: String!
}

input CardVerificationModelInput {
  cardInfoHashBase64: String!
  codeType: CodeType!
  totp: Int
}

input NotificationSettingsInput {
  notificationOnApplication: Boolean!
  notificationOnVerification: Boolean!
}
