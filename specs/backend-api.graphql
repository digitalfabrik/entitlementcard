schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AcceptingStore {
  category: Category!
  categoryId: Int!
  contact: Contact!
  contactId: Int!
  description: String
  id: Int!
  name: String
  physicalStore: PhysicalStore
}

type Address {
  id: Int!
  location: String
  postalCode: String
  state: String
  street: String
}

type Administrator {
  email: String!
  id: Int!
  region: Region
  regionId: Int
  role: Role!
}

type ApiTokenMetaData {
  creatorEmail: String!
  expirationDate: String!
  id: Int!
  type: ApiTokenType!
}

type ApplicationVerificationView {
  contactEmailAddress: String!
  contactName: String!
  organizationName: String!
  rejectedDate: String
  verifiedDate: String
}

type ApplicationView {
  cardCreated: Boolean
  createdDate: String!
  id: Int!
  jsonValue: String!
  note: String
  regionId: Int!
  verifications: [ApplicationVerificationView!]!
  withdrawalDate: String
}

type CardActivationResultModel {
  activationState: ActivationState!
  activationTimeStamp: String!
  totpSecret: String
}

type CardCreationResultModel {
  dynamicActivationCode: DynamicActivationCodeResult!
  staticVerificationCode: StaticVerificationCodeResult
}

type CardStatisticsResultModel {
  cardsActivated: Int!
  cardsCreated: Int!
  region: String!
}

type CardVerificationResultModel {
  extendable: Boolean!
  valid: Boolean!
  verificationTimeStamp: String!
}

type Category {
  id: Int!
  name: String!
}

type Contact {
  email: String
  id: Int!
  telephone: String
  website: String
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type DynamicActivationCodeResult {
  cardInfoHashBase64: String!
  codeBase64: String!
}

type FreinetAgency {
  agencyId: Int!
  agencyName: String!
  apiAccessKey: String!
  dataTransferActivated: Boolean!
}

type Mutation {
  "Activate a dynamic entitlement card"
  activateCard(activationSecretBase64: String!, cardInfoHashBase64: String!, overwrite: Boolean!, project: String!): CardActivationResultModel!
  "Stores a new application for an EAK"
  addEakApplication(application: ApplicationInput!, project: String!, regionId: Int!): Boolean!
  "Changes an administrator's password"
  changePassword(currentPassword: String!, email: String!, newPassword: String!, project: String!): Boolean!
  "Creates a new administrator"
  createAdministrator(email: String!, project: String!, regionId: Int, role: Role!, sendWelcomeMail: Boolean!): Boolean!
  "Creates a new api token for user import endpoint"
  createApiToken(expiresIn: Int!): String!
  "Creates a new digital entitlementcard from self-service portal"
  createCardFromSelfService(encodedCardInfo: String!, generateStaticCode: Boolean!, project: String!): CardCreationResultModel!
  "Creates a new digital entitlementcard and returns it"
  createCardsByCardInfos(applicationIdToMarkAsProcessed: Int, encodedCardInfos: [String!]!, generateStaticCodes: Boolean!, project: String!): [CardCreationResultModel!]!
  "Deletes an existing administrator"
  deleteAdministrator(adminId: Int!, project: String!): Boolean!
  "Deletes a selected API token"
  deleteApiToken(id: Int!): Int!
  "Deletes the application with specified id"
  deleteApplication(applicationId: Int!): Boolean!
  "Deletes a batch of cards (that have not yet been activated)"
  deleteInactiveCards(cardInfoHashBase64List: [String!]!, regionId: Int!): Boolean!
  "Edits an existing administrator"
  editAdministrator(adminId: Int!, newEmail: String!, newRegionId: Int, newRole: Role!, project: String!): Boolean!
  "Import accepting stores via csv"
  importAcceptingStores(dryRun: Boolean!, project: String!, stores: [CSVAcceptingStoreInput!]!): StoreImportReturnResultModel!
  "Reset the administrator's password"
  resetPassword(email: String!, newPassword: String!, passwordResetKey: String!, project: String!): Boolean!
  "Sends a confirmation mail to the user when the card creation was successful"
  sendCardCreationConfirmationMail(deepLink: String!, project: String!, recipientAddress: String!, recipientName: String!, regionId: Int!): Boolean!
  "Sends a mail that allows the administrator to reset their password."
  sendResetMail(email: String!, project: String!): Boolean!
  "Signs in an administrator"
  signIn(authData: AuthDataInput!, project: String!): SignInPayload!
  "Updates a note of an application"
  updateApplicationNote(applicationId: Int!, noteText: String!): Boolean!
  "Updates the data privacy policy of a region"
  updateDataPrivacy(dataPrivacyText: String!, regionId: Int!): Boolean!
  "Updates the notification settings"
  updateNotificationSettings(notificationSettings: NotificationSettingsInput!, project: String!): Boolean!
  "Updates the region specific settings"
  updateRegionSettings(activatedForApplication: Boolean!, activatedForConfirmationMail: Boolean!, regionId: Int!): Boolean!
  "Verifies or rejects an application verification"
  verifyOrRejectApplicationVerification(accessKey: String!, project: String!, verified: Boolean!): Boolean!
  "Withdraws the application"
  withdrawApplication(accessKey: String!): Boolean!
}

type NotificationSettings {
  notificationOnApplication: Boolean!
  notificationOnVerification: Boolean!
}

type PhysicalStore {
  address: Address!
  addressId: Int!
  coordinates: Coordinates!
  id: Int!
  store: AcceptingStore!
  storeId: Int!
}

type Query {
  "Return list of all categories."
  categories: [Category!]!
  "Verify password reset link"
  checkPasswordResetLink(project: String!, resetKey: String!): Boolean!
  "Gets metadata of all api tokens for a project"
  getApiTokenMetaData: [ApiTokenMetaData!]!
  "Queries an application by application accessKey"
  getApplicationByApplicant(accessKey: String!): ApplicationView!
  "Queries an application by application verification accessKey"
  getApplicationByApplicationVerificationAccessKey(applicationVerificationAccessKey: String!): ApplicationView!
  "Queries an application verification by application verification accessKey"
  getApplicationVerification(applicationVerificationAccessKey: String!): ApplicationVerificationView!
  "Queries all applications for a specific region"
  getApplications(regionId: Int!): [ApplicationView!]!
  "Returns card statistics for project. Start and end dates are inclusive."
  getCardStatisticsInProject(dateEnd: String!, dateStart: String!, project: String!): [CardStatisticsResultModel!]!
  "Returns card statistics for region. Start and end dates are inclusive."
  getCardStatisticsInRegion(dateEnd: String!, dateStart: String!, project: String!, regionId: Int!): [CardStatisticsResultModel!]!
  "Returns freinet agency information for a particular region. Works only for the EAK project."
  getFreinetAgencyByRegionId(project: String!, regionId: Int!): FreinetAgency
  "Get the pepper for Koblenz user hashing"
  getHashingPepper: String!
  "Get the notification settings of the authenticated administrator"
  getNotificationSettings(project: String!): NotificationSettings!
  "Returns all administrators in a project. This query requires the role PROJECT_ADMIN."
  getUsersInProject(project: String!): [Administrator!]!
  "Returns all administrators in a region. This query requires the role REGION_ADMIN or PROJECT_ADMIN."
  getUsersInRegion(regionId: Int!): [Administrator!]!
  "Return list of all accepting stores in the eak bayern project."
  physicalStores: [PhysicalStore!]! @deprecated(reason : "Deprecated in favor of project specific query, replace with physicalStoresInProject")
  "Returns list of all accepting stores queried by ids in the eak bayern project."
  physicalStoresById(params: IdsParamsInput!): [PhysicalStore]! @deprecated(reason : "Deprecated in favor of project specific query, replace with physicalStoresByIdInProject")
  "Returns list of all accepting stores in the given project queried by ids."
  physicalStoresByIdInProject(ids: [Int!]!, project: String!): [PhysicalStore]!
  "Returns list of all accepting stores in the given project."
  physicalStoresInProject(project: String!): [PhysicalStore!]!
  "Returns region data for specific region."
  regionByRegionId(regionId: Int!): Region!
  "Return list of all regions in the eak bayern project."
  regions: [Region!]! @deprecated(reason : "Deprecated in favor of project specific query, replace with regionsInProject")
  "Returns regions queried by ids in the eak bayern project."
  regionsById(params: IdsParamsInput!): [Region]! @deprecated(reason : "Deprecated in favor of project specific query, replace with regionsByIdInProject")
  "Returns regions queried by ids in the given project."
  regionsByIdInProject(ids: [Int!]!, project: String!): [Region]!
  "Returns regions by postal code. Works only for the EAK project in which each region has an appropriate regionIdentifier."
  regionsByPostalCode(postalCode: String!, project: String!): [Region!]!
  "Return list of all regions in the given project."
  regionsInProject(project: String!): [Region!]!
  "Search for accepting stores using searchText and categoryIds in the eak bayern project."
  searchAcceptingStores(params: SearchParamsInput!): [AcceptingStore!]! @deprecated(reason : "Deprecated in favor of project specific query, replace with searchAcceptingStoresInProject")
  "Search for accepting stores in the given project using searchText and categoryIds."
  searchAcceptingStoresInProject(params: SearchParamsInput!, project: String!): [AcceptingStore!]!
  "Returns whether there is a card in the given project with that hash registered for that this TOTP is currently valid and a timestamp of the last check"
  verifyCardInProject(card: CardVerificationModelInput!, project: String!): Boolean! @deprecated(reason : "Deprecated since May 2023 in favor of CardVerificationResultModel that return a current timestamp, replace with verifyCardInProjectV2")
  "Returns whether there is a card in the given project with that hash registered for that this TOTP is currently valid, extendable and a timestamp of the last check"
  verifyCardInProjectV2(card: CardVerificationModelInput!, project: String!): CardVerificationResultModel!
  "Returns the requesting administrator as retrieved from his JWT token."
  whoAmI(project: String!): Administrator!
}

type Region {
  activatedForApplication: Boolean!
  activatedForCardConfirmationMail: Boolean!
  dataPrivacyPolicy: String
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String
}

type SignInPayload {
  token: String!
}

type StaticVerificationCodeResult {
  cardInfoHashBase64: String!
  codeBase64: String!
}

type StoreImportReturnResultModel {
  storesCreated: Int!
  storesDeleted: Int!
  storesUntouched: Int!
}

enum ActivationState {
  did_not_overwrite_existing
  failed
  revoked
  success
}

enum ApiTokenType {
  USER_IMPORT
  VERIFIED_APPLICATION
}

enum ApplicationType {
  FIRST_APPLICATION
  RENEWAL_APPLICATION
}

enum BavariaCardType {
  BLUE
  GOLDEN
}

enum BlueCardEntitlementType {
  JULEICA
  MILITARY_RESERVE
  VOLUNTEER_SERVICE
  WORK_AT_DEPARTMENT
  WORK_AT_ORGANIZATIONS
}

enum CodeType {
  DYNAMIC
  STATIC
}

enum GoldenCardEntitlementType {
  HONORED_BY_MINISTER_PRESIDENT
  MILITARY_RESERVE
  WORK_AT_DEPARTMENT
  WORK_AT_ORGANIZATIONS
}

enum GraphQLExceptionCode {
  EMAIL_ALREADY_EXISTS
  INVALID_CARD_HASH
  INVALID_CODE_TYPE
  INVALID_CREDENTIALS
  INVALID_DATA_POLICY_SIZE
  INVALID_FILE_SIZE
  INVALID_FILE_TYPE
  INVALID_INPUT
  INVALID_JSON
  INVALID_LINK
  INVALID_NOTE_SIZE
  INVALID_PASSWORD
  INVALID_PASSWORD_RESET_LINK
  INVALID_QR_CODE_SIZE
  INVALID_ROLE
  MAIL_NOT_SENT
  PASSWORD_RESET_KEY_EXPIRED
  REGION_NOT_ACTIVATED_CARD_CONFIRMATION_MAIL
  REGION_NOT_ACTIVATED_FOR_APPLICATION
  REGION_NOT_FOUND
  USER_ENTITLEMENT_EXPIRED
  USER_ENTITLEMENT_NOT_FOUND
}

enum Role {
  EXTERNAL_VERIFIED_API_USER
  NO_RIGHTS
  PROJECT_ADMIN
  PROJECT_STORE_MANAGER
  REGION_ADMIN
  REGION_MANAGER
}

"A 64-bit signed integer"
scalar Long

"A file part in a multipart request"
scalar Upload

input AddressInput {
  addressSupplement: ShortTextInput
  country: ShortTextInput!
  houseNumber: ShortTextInput!
  location: ShortTextInput!
  postalCode: ShortTextInput!
  street: ShortTextInput!
}

input ApplicationDetailsInput {
  applicationType: ApplicationType
  blueCardEntitlement: BlueCardEntitlementInput
  cardType: BavariaCardType!
  givenInformationIsCorrectAndComplete: Boolean!
  goldenCardEntitlement: GoldenCardEntitlementInput
  hasAcceptedEmailUsage: Boolean!
  hasAcceptedPrivacyPolicy: Boolean!
  wantsDigitalCard: Boolean!
  wantsPhysicalCard: Boolean!
}

"""
An application for the Bayerische Ehrenamtskarte.
The field `cardType` specifies whether `blueCardEntitlement` or `goldenCardEntitlement` must be present/null.
The field `applicationType` must not be null if and only if `cardType` is BavariaCardType.BLUE.
"""
input ApplicationInput {
  applicationDetails: ApplicationDetailsInput!
  personalData: PersonalDataInput!
}

input AttachmentInput {
  data: Upload!
}

input AuthDataInput {
  email: String!
  password: String!
}

"Entitlement for a blue EAK. The field selected by entitlementType must not be null; all others must be null."
input BlueCardEntitlementInput {
  entitlementType: BlueCardEntitlementType!
  juleicaEntitlement: BlueCardJuleicaEntitlementInput
  militaryReserveEntitlement: BlueCardMilitaryReserveEntitlementInput
  volunteerServiceEntitlement: BlueCardVolunteerServiceEntitlementInput
  workAtDepartmentEntitlement: BlueCardWorkAtDepartmentEntitlementInput
  workAtOrganizationsEntitlement: BlueCardWorkAtOrganizationsEntitlementInput
}

input BlueCardJuleicaEntitlementInput {
  copyOfJuleicaBack: AttachmentInput
  copyOfJuleicaFront: AttachmentInput!
  juleicaExpirationDate: DateInput!
  juleicaNumber: ShortTextInput!
}

input BlueCardMilitaryReserveEntitlementInput {
  certificate: AttachmentInput!
}

input BlueCardVolunteerServiceEntitlementInput {
  certificate: AttachmentInput!
  programName: ShortTextInput!
}

input BlueCardWorkAtDepartmentEntitlementInput {
  certificate: AttachmentInput
  organization: OrganizationInput!
  responsibility: ShortTextInput!
}

input BlueCardWorkAtOrganizationsEntitlementInput {
  list: [WorkAtOrganizationInput!]!
}

input CSVAcceptingStoreInput {
  categoryId: String
  discountDE: String
  discountEN: String
  email: String
  homepage: String
  houseNumber: String
  latitude: String
  location: String
  longitude: String
  name: String
  postalCode: String
  street: String
  telephone: String
}

input CardVerificationModelInput {
  cardInfoHashBase64: String!
  codeType: CodeType!
  totp: Int
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

"A local date in the format yyyy-MM-dd"
input DateInput {
  date: String!
}

"An email address with at most 300 characters"
input EmailInput {
  email: String!
}

"Entitlement for a golden EAK. The field selected by entitlementType must not be null; all others must be null."
input GoldenCardEntitlementInput {
  entitlementType: GoldenCardEntitlementType!
  honoredByMinisterPresidentEntitlement: GoldenCardHonoredByMinisterPresidentEntitlementInput
  militaryReserveEntitlement: GoldenCardMilitaryReserveEntitlementInput
  workAtDepartmentEntitlement: GoldenCardWorkAtDepartmentEntitlementInput
  workAtOrganizationsEntitlement: GoldenCardWorkAtOrganizationsEntitlementInput
}

input GoldenCardHonoredByMinisterPresidentEntitlementInput {
  certificate: AttachmentInput!
}

input GoldenCardMilitaryReserveEntitlementInput {
  certificate: AttachmentInput!
}

input GoldenCardWorkAtDepartmentEntitlementInput {
  certificate: AttachmentInput
  organization: OrganizationInput!
  responsibility: ShortTextInput!
}

input GoldenCardWorkAtOrganizationsEntitlementInput {
  list: [WorkAtOrganizationInput!]!
}

input IdsParamsInput {
  ids: [Int!]!
}

input NotificationSettingsInput {
  notificationOnApplication: Boolean!
  notificationOnVerification: Boolean!
}

input OrganizationContactInput {
  email: EmailInput!
  hasGivenPermission: Boolean!
  name: ShortTextInput!
  telephone: ShortTextInput!
}

input OrganizationInput {
  address: AddressInput!
  category: ShortTextInput!
  contact: OrganizationContactInput!
  name: ShortTextInput!
}

input PersonalDataInput {
  address: AddressInput!
  dateOfBirth: DateInput!
  emailAddress: EmailInput!
  forenames: ShortTextInput!
  surname: ShortTextInput!
  telephone: ShortTextInput
}

input SearchParamsInput {
  categoryIds: [Int!]
  coordinates: CoordinatesInput
  limit: Int
  offset: Long
  searchText: String
}

"A String wrapper that expects a non-empty string with at most 300 characters"
input ShortTextInput {
  shortText: String!
}

input WorkAtOrganizationInput {
  amountOfWork: Float!
  certificate: AttachmentInput
  isAlreadyVerified: Boolean
  organization: OrganizationInput!
  payment: Boolean!
  responsibility: ShortTextInput!
  workSinceDate: DateInput!
}
